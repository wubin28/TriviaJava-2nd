Steps of taming the bad code
  * Identify the interface of the server side
  ** Run the client GameRunner to see the output.
  ** Check the public interface (i.e. all the public methods) of the server side classes to see if they are used by clients.

  * Make the interface of the server side as narrow as possible
  ** Do not touch client side code in refactoring.
  ** If a public method of a server side class is not used by any client, change it from public to private.
  ** If the return value of a public method of the server side is not used by any clients, then remove it.
  ** Remove all public methods which are not used anywhere in the code base.
  ** Make all fields of the server side classes to be private.

  * Write characterization tests to protect all public methods of the server side
  ** Read the code of the server side and pay attention to the implementation of the  public methods at first.
  ** Add comments for the public methods of the server side with poor names.
  ** Fix all typos.
  ** Inline unnecessary methods.
  ** Extract methods and eliminate all duplicated code.
  ** Choose good names for all non-public methods of server side if necessary.
  ** List all the behaviors of the public interface of server side called by clients.
  ** List all major behaviours of the code to be tamed which are not going to be changed in the near future.
  ** Write acceptance characterization tests using the narrowed public interface of the server side.

  * Break the big class down into several classes to share the responsibilities.
  ** Break responsibilities of big classes into new classes. Find all the nouns from the descriptions of all the major behaviours and use them to be the candidates of new classes.
  ** Use Sonar to fix all Major and more severe issues.

  * Deprecate the old bad interface and create new interface for new clients
  ** Write tests for all new interface
  ** Write new clients


To Do
=====
  * Make method Game.createRockQuestion() private since it's not used by any clients.